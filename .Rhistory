AIC(model3)
BIC(model1)
BIC(model2)
BIC(model3)
Box.test(model1$residuals)
# 25. Mato Grosso
# Preparação dos dados "Cuiabá - MT"
mort_att_MT <- mort_att %>%
filter(UF == "MT")
mort_att_MT
## Início das atividades Uber
uber_cuiaba <-as.Date("2016-11-01")
# Plotagem dos gráficos para análise visual da série temporal ("Cuiabá - MT")
## Gráfico da série temporal completa “MT”
tiff(filename = "Série MT.tiff")
autoplot(mort_att_MT, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Cuiabá - MT (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized mortality (100 thousand inhabitants)")+
geom_vline(aes(xintercept=as.Date(uber_cuiaba),
col="Start of Uber activities"))+
theme_minimal()
dev.off()
## Média e desvio padrão da mortalidade por ATT período total   "Cuiabá - MT"
mort_att_MT <- mort_att_MT %>%
filter(month < yearmonth("2017 Nov"))
mort_att_MT
mort_att_MT %>% features(mort_pad_att, list(media_pre_MT = mean))
mort_att_MT %>% features(mort_pad_att, list(desv_pad_pre_MT = sd))
# 2. Média e desvio padrão da mortalidade por ATT período pré-Uber "Cuiabá - MT"
mort_pre_MT <- mort_att_MT %>%
filter(month < yearmonth("2016 Nov"))
mort_pre_MT
mort_pre_MT %>% features(mort_pad_att, list(media_pre_MT = mean))
mort_pre_MT %>% features(mort_pad_att, list(desv_pad_pre_MT = sd))
# 3. Média e desvio padrão da mortalidade por ATT período pós-Uber "Cuiabá - MT"
mort_pos_MT <- mort_att_MT %>% filter(month >= yearmonth("2016 Nov"), month < yearmonth("2017 Nov"))
mort_pos_MT
mort_pos_MT %>% features(mort_pad_att, list(media_pos_MT = mean))
mort_pos_MT %>% features(mort_pad_att, list(desv_pad_pos_MT = sd))
## Preparação dados do período pré-Uber "Cuiabá - MT"
mort_pre_MT <- mort_att_MT %>%
filter(UF == "MT", month < yearmonth("2016 Nov"))
mort_pre_MT
# Conversão de dados para time series object "Cuiabá - MT"
## Período total
mort_att_MT <- ts(mort_att_MT[,2], frequency=12, start=c(2000,1),
end = c(2017,10))
## Pré-uber
mort_pre_MT <- ts(mort_pre_MT[,2], frequency=12, start=c(2000,1),
end = c(2016,10))
## Gráfico para verificação visual de sazonalidade
tiff(filename = "Sazonalidade MT.tiff")
mort_pre_MT %>% ggseasonplot()
dev.off()
# Visualização de gráficos ACF/PACF de dados não diferenciados "Cuiabá - MT"
pdf("ACF PACF undifferenced MT.pdf")
acf(as.numeric(mort_pre_MT), lag.max=48)
dev.off()
# Visualização de gráficos ACF/PACF de dados diferenciados/sazonalmente diferenciados "Cuiabá - MT"
pdf("ACF PACF dif_seasonally dif MT.pdf")
acf(diff(as.numeric(mort_pre_MT),12), lag.max=48)
dev.off()
# Uso de algoritmo automatizado para identificar parâmetros p/q  "Cuiabá - MT"
# Especiaficações: Número máximo de diferenciações soazonais = 2 ; Número máximo de diferenciações não sazonais = 2
model <- auto.arima(mort_pre_MT, seasonal=FALSE, max.d=2, max.D=2,
stepwise=TRUE, trace=TRUE,max.order=7)
model
# Modelo selecionado: ARIMA(1,0,1) with non-zero mean
# Checagem dos resíduos do modelo "Cuiabá - MT"
pdf("Resíduos modelo MT.pdf")
checkresiduals(model, test=FALSE)
dev.off()
Box.test(model$residuals)
# Estimativa dos parâmetros e intervalo de confiança do modelo "Cuiabá - MT"
summary(model)
confint(model)
##Análise de Intervenção "Cuiabá - MT"
# Criação e visualização de variável que representa mudança em degrau "Cuiabá - MT"
step <- as.numeric(as.yearmon(time(mort_att_MT))>='Nov 2016')
step
# Criação e visualização de variável que representa mudança em rampa "Cuiabá - MT"
ramp <- append(rep(0,202), seq(1,12,1))
ramp
## Criação e testagem de modelos "Cuiabá - MT"
# Modelo 1 - sem função de transferência "Cuiabá - MT"
model1 = Arima(mort_att_MT,
include.drift = FALSE,
include.mean = TRUE,
order = c(1,0,1),
method = c("ML"))
# Checagem dos resíduos do modelo 1 "Cuiabá - MT"
pdf("Resíduos modelo 1 MT.pdf")
checkresiduals(model1, test=FALSE)
dev.off()
Box.test(model1$residuals)
# Estimativa dos parâmetros do modelo 1 "Cuiabá - MT"
summary(model1)
confint(model1)
# Modelo 2 - função de transferência em degrau "Cuiabá - MT"
model2 = Arima(mort_att_MT,
include.drift = FALSE,
include.mean = TRUE,
order = c(1,0,1),
xreg = cbind(step),
method = c("ML"))
# Checagem dos resíduos do modelo 2 "Cuiabá - MT"
pdf("Resíduos modelo 2 MT.pdf")
checkresiduals(model2, test=FALSE)
dev.off()
Box.test(model2$residuals)
# Estimativa dos parâmetros do modelo 2 "Cuiabá - MT"
summary(model2)
confint(model2)
# Modelo 3 - função de transferência em rampa "Cuiabá - MT"
model3 = Arima(mort_att_MT,
include.drift = FALSE,
include.mean = TRUE,
order = c(1,0,1),
xreg = cbind(ramp),
method = c("ML"))
# Checagem dos resíduos do modelo 3 "Cuiabá - MT"
pdf("Resíduos modelo 3 MT.pdf")
checkresiduals(model3, test=FALSE)
dev.off()
Box.test(model3$residuals)
# Estimativa dos parâmetros do modelo 3 "Cuiabá - MT"
summary(model3)
confint(model3)
# Comparação AIC dos 3 modelos "Cuiabá - MT"
AIC(model1)
AIC(model2)
AIC(model3)
BIC(model1)
BIC(model2)
BIC(model3)
Box.test(model1$residuals)
# 26. Goiás
# Preparação dos dados "Goiânia - GO"
mort_att_GO <- mort_att %>%
filter(UF == "GO")
mort_att_GO
## Início das atividades Uber
uber_goiania <-as.Date("2016-01-01")
# Plotagem dos gráficos para análise visual da série temporal ("Goiânia - GO")
## Gráfico da série temporal completa “GO”
tiff(filename = "Série GO.tiff")
autoplot(mort_att_GO, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Goiânia - GO (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized mortality (100 thousand inhabitants)")+
geom_vline(aes(xintercept=as.Date(uber_goiania),
col="Start of Uber activities"))+
theme_minimal()
dev.off()
## Média e desvio padrão da mortalidade por ATT período total   "Goiânia - GO"
mort_att_GO <- mort_att_GO %>%
filter(month < yearmonth("2017 Jan"))
mort_att_GO
mort_att_GO %>% features(mort_pad_att, list(media_pre_GO = mean))
mort_att_GO %>% features(mort_pad_att, list(desv_pad_pre_GO = sd))
# 2. Média e desvio padrão da mortalidade por ATT período pré-Uber "Goiânia - GO"
mort_pre_GO <- mort_att_GO %>%
filter(month < yearmonth("2016 Jan"))
mort_pre_GO
mort_pre_GO %>% features(mort_pad_att, list(media_pre_GO = mean))
mort_pre_GO %>% features(mort_pad_att, list(desv_pad_pre_GO = sd))
# 3. Média e desvio padrão da mortalidade por ATT período pós-Uber "Goiânia - GO"
mort_pos_GO <- mort_att_GO %>% filter(month >= yearmonth("2016 Jan"), month < yearmonth("2017 Jan"))
mort_pos_GO
mort_pos_GO %>% features(mort_pad_att, list(media_pos_GO = mean))
mort_pos_GO %>% features(mort_pad_att, list(desv_pad_pos_GO = sd))
## Preparação dados do período pré-Uber "Goiânia - GO"
mort_pre_GO <- mort_att_GO %>%
filter(UF == "GO", month < yearmonth("2016 Jan"))
mort_pre_GO
# Conversão de dados para time series object "Goiânia - GO"
## Período total
mort_att_GO <- ts(mort_att_GO[,2], frequency=12, start=c(2000,1),
end = c(2016,12))
## Pré-uber
mort_pre_GO <- ts(mort_pre_GO[,2], frequency=12, start=c(2000,1),
end = c(2015,12))
## Gráfico para verificação visual de sazonalidade
tiff(filename = "Sazonalidade GO.tiff")
mort_pre_GO %>% ggseasonplot()
dev.off()
# Visualização de gráficos ACF/PACF de dados não diferenciados "Goiânia - GO"
pdf("ACF PACF undifferenced GO.pdf")
acf(as.numeric(mort_pre_GO), lag.max=48)
dev.off()
# Visualização de gráficos ACF/PACF de dados diferenciados/sazonalmente diferenciados "Goiânia - GO"
pdf("ACF PACF dif_seasonally dif GO.pdf")
acf(diff(as.numeric(mort_pre_GO),12), lag.max=48)
dev.off()
# Uso de algoritmo automatizado para identificar parâmetros p/q  "Goiânia - GO"
# Especiaficações: Número máximo de diferenciações soazonais = 2 ; Número máximo de diferenciações não sazonais = 2
model <- auto.arima(mort_pre_GO, seasonal=FALSE, max.d=2, max.D=2,
stepwise=TRUE, trace=TRUE,max.order=7)
model
# Modelo selecionado: ARIMA(0,1,1)
# Checagem dos resíduos do modelo "Goiânia - GO"
pdf("Resíduos modelo GO.pdf")
checkresiduals(model, test=FALSE)
dev.off()
Box.test(model$residuals)
# Estimativa dos parâmetros e intervalo de confiança do modelo "Goiânia - GO"
summary(model)
confint(model)
##Análise de Intervenção "Goiânia - GO"
# Criação e visualização de variável que representa mudança em degrau "Goiânia - GO"
step <- as.numeric(as.yearmon(time(mort_att_GO))>='Jan 2016')
step
# Criação e visualização de variável que representa mudança em rampa "Goiânia - GO"
ramp <- append(rep(0,192), seq(1,12,1))
ramp
## Criação e testagem de modelos "Goiânia - GO"
# Modelo 1 - sem função de transferência "Goiânia - GO"
model1 = Arima(mort_att_GO,
include.drift = FALSE,
include.mean = FALSE,
order = c(0,1,1))
# Checagem dos resíduos do modelo 1 "Goiânia - GO"
pdf("Resíduos modelo 1 GO.pdf")
checkresiduals(model1, test=FALSE)
dev.off()
Box.test(model1$residuals)
# Estimativa dos parâmetros do modelo 1 "Goiânia - GO"
summary(model1)
confint(model1)
# Modelo 2 - função de transferência em degrau "Goiânia - GO"
model2 = Arima(mort_att_GO,
include.drift = FALSE,
include.mean = FALSE,
order = c(0,1,1),
xreg = cbind(step))
# Checagem dos resíduos do modelo 2 "Goiânia - GO"
pdf("Resíduos modelo 2 GO.pdf")
checkresiduals(model2, test=FALSE)
dev.off()
Box.test(model2$residuals)
# Estimativa dos parâmetros do modelo 2 "Goiânia - GO"
summary(model2)
confint(model2)
# Modelo 3 - função de transferência em rampa "Goiânia - GO"
model3 = Arima(mort_att_GO,
include.drift = FALSE,
include.mean = FALSE,
order = c(0,1,1),
xreg = cbind(ramp))
# Checagem dos resíduos do modelo 3 "Goiânia - GO"
pdf("Resíduos modelo 3 GO.pdf")
checkresiduals(model3, test=FALSE)
dev.off()
Box.test(model3$residuals)
# Estimativa dos parâmetros do modelo 3 "Goiânia - GO"
summary(model3)
confint(model3)
# Comparação AIC dos 3 modelos "Goiânia - GO"
AIC(model1)
AIC(model2)
AIC(model3)
BIC(model1)
BIC(model2)
BIC(model3)
Box.test(model1$residuals)
# 27. Distrito Federal
# Preparação dos dados "Brasília - DF"
mort_att_DF <- mort_att %>%
filter(UF == "DF")
mort_att_DF
## Início das atividades Uber
uber_brasilia <-as.Date("2014-11-01")
# Plotagem dos gráficos para análise visual da série temporal ("Brasília - DF")
## Gráfico da série temporal completa “DF”
tiff(filename = "Série DF.tiff")
autoplot(mort_att_DF, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Brasília - DF (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized mortality (100 thousand inhabitants)")+
geom_vline(aes(xintercept=as.Date(uber_brasilia),
col="Start of Uber activities"))+
theme_minimal()
dev.off()
## Média e desvio padrão da mortalidade por ATT período total   "Brasília - DF"
mort_att_DF <- mort_att_DF %>%
filter(month < yearmonth("2015 Nov"))
mort_att_DF
mort_att_DF %>% features(mort_pad_att, list(media_pre_DF = mean))
mort_att_DF %>% features(mort_pad_att, list(desv_pad_pre_DF = sd))
# 2. Média e desvio padrão da mortalidade por ATT período pré-Uber "Brasília - DF"
mort_pre_DF <- mort_att_DF %>%
filter(month < yearmonth("2014 Nov"))
mort_pre_DF
mort_pre_DF %>% features(mort_pad_att, list(media_pre_DF = mean))
mort_pre_DF %>% features(mort_pad_att, list(desv_pad_pre_DF = sd))
# 3. Média e desvio padrão da mortalidade por ATT período pós-Uber "Brasília - DF"
mort_pos_DF <- mort_att_DF %>% filter(month >= yearmonth("2014 Nov"), month < yearmonth("2015 Nov"))
mort_pos_DF
mort_pos_DF %>% features(mort_pad_att, list(media_pos_DF = mean))
mort_pos_DF %>% features(mort_pad_att, list(desv_pad_pos_DF = sd))
## Preparação dados do período pré-Uber "Brasília - DF"
mort_pre_DF <- mort_att_DF %>%
filter(UF == "DF", month < yearmonth("2014 Nov"))
mort_pre_DF
# Conversão de dados para time series object "Brasília - DF"
## Período total
mort_att_DF <- ts(mort_att_DF[,2], frequency=12, start=c(2000,1),
end = c(2015,10))
## Pré-uber
mort_pre_DF <- ts(mort_pre_DF[,2], frequency=12, start=c(2000,1),
end = c(2014,10))
## Gráfico para verificação visual de sazonalidade
tiff(filename = "Sazonalidade DF.tiff")
mort_pre_DF %>% ggseasonplot()
dev.off()
# Visualização de gráficos ACF/PACF de dados não diferenciados "Brasília - DF"
pdf("ACF PACF undifferenced DF.pdf")
acf(as.numeric(mort_pre_DF), lag.max=48)
dev.off()
# Visualização de gráficos ACF/PACF de dados diferenciados/sazonalmente diferenciados "Brasília - DF"
pdf("ACF PACF dif_seasonally dif DF.pdf")
acf(diff(as.numeric(mort_pre_DF),12), lag.max=48)
dev.off()
# Uso de algoritmo automatizado para identificar parâmetros p/q  "Brasília - DF"
# Especiaficações: Número máximo de diferenciações soazonais = 2 ; Número máximo de diferenciações não sazonais = 2
model <- auto.arima(mort_pre_DF, seasonal=FALSE, max.d=2, max.D=2,
stepwise=TRUE, trace=TRUE,max.order=7)
model
# Modelo selecionado: ARIMA(1,1,2)
# Checagem dos resíduos do modelo "Brasília - DF"
pdf("Resíduos modelo DF.pdf")
checkresiduals(model, test=FALSE)
dev.off()
Box.test(model$residuals)
# Estimativa dos parâmetros e intervalo de confiança do modelo "Brasília - DF"
summary(model)
confint(model)
##Análise de Intervenção "Brasília - DF"
# Criação e visualização de variável que representa mudança em degrau "Brasília - DF"
step <- as.numeric(as.yearmon(time(mort_att_DF))>='Nov 2014')
step
# Criação e visualização de variável que representa mudança em rampa "Brasília - DF"
ramp <- append(rep(0,178), seq(1,12,1))
ramp
## Criação e testagem de modelos "Brasília - DF"
# Modelo 1 - sem função de transferência "Brasília - DF"
model1 = Arima(mort_att_DF,
include.drift = FALSE,
include.mean = FALSE,
order = c(1,1,2))
# Checagem dos resíduos do modelo 1 "Brasília - DF"
pdf("Resíduos modelo 1 DF.pdf")
checkresiduals(model1, test=FALSE)
dev.off()
Box.test(model1$residuals)
# Estimativa dos parâmetros do modelo 1 "Brasília - DF"
summary(model1)
confint(model1)
# Modelo 2 - função de transferência em degrau "Brasília - DF"
model2 = Arima(mort_att_DF,
include.drift = FALSE,
include.mean = FALSE,
order = c(1,1,2),
xreg = cbind(step))
# Checagem dos resíduos do modelo 2 "Brasília - DF"
pdf("Resíduos modelo 2 DF.pdf")
checkresiduals(model2, test=FALSE)
dev.off()
Box.test(model2$residuals)
# Estimativa dos parâmetros do modelo 2 "Brasília - DF"
summary(model2)
confint(model2)
# Modelo 3 - função de transferência em rampa "Brasília - DF"
model3 = Arima(mort_att_DF,
include.drift = FALSE,
include.mean = FALSE,
order = c(1,1,2),
xreg = cbind(ramp))
# Checagem dos resíduos do modelo 3 "Brasília - DF"
pdf("Resíduos modelo 3 DF.pdf")
checkresiduals(model3, test=FALSE)
dev.off()
Box.test(model3$residuals)
# Estimativa dos parâmetros do modelo 3 "Brasília - DF"
summary(model3)
confint(model3)
# Comparação AIC dos 3 modelos "Brasília - DF"
AIC(model1)
AIC(model2)
AIC(model3)
BIC(model1)
BIC(model2)
BIC(model3)
Box.test(model1$residuals)
# 28. Todas as capitais (apenas média e desvio padrão totais)
# Preparação dos dados "Todas as capitais"
mort_att_BR <- mort_att %>%
filter(UF == "BR")
mort_att_BR
# Plotagem dos gráficos para análise visual da série temporal ("Todas as capitais")
## Gráfico da série temporal completa “BR”
tiff(filename = "Série Todas as capitais.tiff")
autoplot(mort_att_BR, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Todas as capitais (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized mortality (100 thousand inhabitants)")+
theme_minimal()
dev.off()
## Média e desvio padrão da mortalidade por ATT período total   "Todas as capitais"
mort_att_BR <- mort_att_BR %>%
filter(month < yearmonth("2018 Dec"))
mort_att_BR
mort_att_BR %>% features(mort_pad_att, list(media_pre_BR = mean))
mort_att_BR %>% features(mort_pad_att, list(desv_pad_pre_BR = sd))
# 2. Média e desvio padrão da mortalidade por ATT período pré-Uber "Brasília - DF"
mort_pre_DF <- mort_att_DF %>%
filter(month < yearmonth("2014 Nov"))
# Valores previstos x observados da taxa de mortalidade por ATT das UFs em que foram selecionados modelos com função de transferência
## 1. Belo Horizonte (MG)	ARIMA(0,1,1)
# Modelagem dos dados excluindo o período pós-uber
model2_s <- Arima(window(mort_pre_MG, end=c(2014,8)), order=c(0,1,1))
# Previsão de 10 meses após a intervenção e conversão para objeto de série temporal
fc_s <- forecast(model2_s, h=12, level=c(95))
fc_s.ts <- ts(as.numeric(fc_s$mean), start=c(2014,9), frequency=12)
# Combinação com dados observados
ts.comb_s <- ts.union(mort_att_MG, fc_s.ts)
ts.comb_s
# Plotagem (previsto x observado)
tiff(filename = "Prev x Obs MG.tiff")
plot(ts.comb_s, type="l", plot.type="s", col=c('black','red'), ylim=c(0,6), main = "Belo Horizonte (MG)", xlab="Month of death", ylab="Standardized mortality (100,000 inhab.)")
abline(v=2014.55, lty="dashed", col="blue")
dev.off()
help("plot")
## 2. Rio de Janeiro (RJ)	ARIMA(1,1,2)
# Modelagem dos dados excluindo o período pós-uber
model2_s <- Arima(window(mort_pre_RJ, end=c(2014,4)), order=c(1,1,2))
# Previsão de 10 meses após a intervenção e conversão para objeto de série temporal
fc_s <- forecast(model2_s, h=12, level=c(95))
fc_s.ts <- ts(as.numeric(fc_s$mean), start=c(2014,5), frequency=12)
# Combinação com dados observados
ts.comb_s <- ts.union(mort_att_RJ, fc_s.ts)
ts.comb_s
# Plotagem (previsto x observado)
tiff(filename = "Prev x Obs RJ.tiff")
plot(ts.comb_s, type="l", plot.type="s", col=c('black','red'), ylim=c(0,6), main = "Rio de Janeiro (RJ)", xlab="Month of death", ylab="Standardized mortality (100,000 inhab.)")
abline(v=2014.35, lty="dashed", col="blue")
dev.off()
# 28. Todas as capitais (apenas média e desvio padrão totais)
# Preparação dos dados "Todas as capitais"
mort_att_BR <- mort_att %>%
filter(UF == "BR")
mort_att_BR
# Plotagem dos gráficos para análise visual da série temporal ("Todas as capitais")
## Gráfico da série temporal completa “BR”
tiff(filename = "Série Todas as capitais.tiff")
autoplot(mort_att_BR, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Todas as capitais (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized mortality (100 thousand inhabitants)")+
theme_minimal()
dev.off()
## Média e desvio padrão da mortalidade por ATT período total   "Todas as capitais"
mort_att_BR <- mort_att_BR %>%
filter(month < yearmonth("2018 Dec"))
mort_att_BR
mort_att_BR %>% features(mort_pad_att, list(media_pre_BR = mean))
mort_att_BR %>% features(mort_pad_att, list(desv_pad_pre_BR = sd))
# Carregamento de pacotes a serem utilizados
library(fpp3)
library (tidyverse)
library(magrittr)
library(ggfortify)
library(forecast)
library(TSA)
library(feasts)
library(ggplot2)
library(astsa)
library(dplyr)
library(zoo)
library(readxl)
library (tidyverse)
library(maptools)
library(spdep)
library(cartography)
library(mapsf)
library(tmap)
library(leaflet)
library(rgdal)
library(RColorBrewer)
TRABALHANDO COM MORTALIDADE POR ATT
## TRABALHANDO COM MORTALIDADE POR ATT
# 1. Importação e formatação dos dados
setwd("E:/doutorado/ATT Uber/Documentos submissão AJE/Revisão rodada 2/ATTUber_aug2023")
mort_att = read.table("mort_att.csv",sep=";", header = TRUE,dec=",")
glimpse(mort_att)
# 2. Estruturação da série temporal
## Formatação da variável de tempo mensal
## Armazenamento como um objeto tsibble, definindo a variável "month" como índice
mort_att <- mort_att %>%
mutate(month= yearmonth(month)) %>%
as_tsibble(index = month, key = UF)
mort_att
## Gráfico da série temporal completa
tiff(filename = "Figura 1.tiff")
autoplot(mort_att, mort_pad_att) +
labs(title = "Mortality from traffic injuries, Brazil (Jan 2000 to Dec 2020)",
x = "Month of death",
y = "Standardized  mortality (100 thousand inhabitants)") +
theme_minimal()+
facet_wrap(vars(regiao, capital), ncol = 4L)
dev.off()
